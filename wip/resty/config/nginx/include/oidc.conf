access_by_lua_block {

  local opts = {
    -- the full redirect URI must be protected by this script and becomes:
      -- ngx.var.scheme.."://"..ngx.var.http_host..opts.redirect_uri_path
    -- unless the scheme is overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto header in the incoming request
    redirect_uri_path = "/redirect_uri",
    discovery = "https://test.my2do.com/openam/oauth2/.well-known/openid-configuration",

    -- client_id = os.getenv("CLIENT_ID"),
    -- client_secret = os.getenv("CLIENT_SECRET"),
    client_id = "oidctest",
    client_secret = "password",
    --authorization_params = {hd = "forgerock.com"},
    --scope = "openid email profile",
    --iat_slack = 600,
    --redirect_uri_scheme = "https",
    --logout_path = "/logout",
    --token_endpoint_auth_method = ["client_secret_basic"|"client_secret_post"],
    ssl_verify = "no"
  }
  -- ngx.say(client_secret)

  -- call authenticate for OpenID Connect user authentication
  local res, err = require("resty.openidc").authenticate(opts)

  if err then
  ngx.status = 500
  ngx.say(err)
  ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
  end

  -- at this point res is a Lua table with 3 keys:
    --   id_token    : a Lua table with the claims from the id_token (required)
  --   access_token: the access token (optional)
  --   user: a Lua table with the claims returned from the user info endpoint (optional)

  local inspect = require("inspect")
  local udump = inspect(res.user)

  local session = require "resty.session".start()
  session.data.email = res.user.email
  session: save()
  ngx.log(ngx.DEBUG, "user token is", udump)
  ngx.req.set_header("X-USER", res.id_token.sub)

  ngx.redirect("foo")
}
error_log /dev/stdout debug;

events {
  worker_connections 128;
}

# You need to add any env vars here that LUA needs
env CLIENT_SECRET;
env CLIENT_ID;


http {

  # ipv6 is causing issues in Docker containers (could be a mac beta thing?)
  # This makes sure dns returns only ipv4 addresses
  resolver 8.8.8.8 ipv6=off;
  # resolver localhost ipv6 = off;


  # lua_ssl_trusted_certificate "root-certs.pem";
  # lua_ssl_trusted_certificate "/opt/openresty/nginx/conf/root-certs.pem";
  # Path to default ubuntu openssl cert location. apt install ca-certificates
  lua_ssl_trusted_certificate "/etc/ssl/certs/ca-certificates.crt";
  lua_ssl_verify_depth 5;
  lua_package_path "$prefix/lualib/?.lua;;";
  # this does not work for development...
  # lua_code_cache off;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;


  lua_shared_dict locks 1M;
  lua_shared_dict cache 10M;

  server {
    listen 80;

    location / {

      access_by_lua_block {

        local opts = {
          -- the full redirect URI must be protected by this script and becomes:
            -- ngx.var.scheme.."://"..ngx.var.http_host..opts.redirect_uri_path
          -- unless the scheme is overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto header in the incoming request
          redirect_uri_path = "/redirect_uri",
          discovery = "https://accounts.google.com/.well-known/openid-configuration",
          client_id = os.getenv("CLIENT_ID"),
          client_secret = os.getenv("CLIENT_SECRET"),
          --authorization_params = {hd = "forgerock.com"},
          --scope = "openid email profile",
          --iat_slack = 600,
          --redirect_uri_scheme = "https",
          --logout_path = "/logout",
          --token_endpoint_auth_method = ["client_secret_basic"|"client_secret_post"],
          ssl_verify = "no"
        }
        -- ngx.say(client_secret)

        -- call authenticate for OpenID Connect user authentication
        local res, err = require("resty.openidc").authenticate(opts)

        if err then
        ngx.status = 500
        ngx.say(err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
        --   access_token: the access token (optional)
        --   user: a Lua table with the claims returned from the user info endpoint (optional)

        local inspect = require("inspect")
        local udump = inspect(res.user)

        local session = require "resty.session".start()
        session.data.email = res.user.email
        session: save()
        ngx.log(ngx.DEBUG, "user token is", udump)
        ngx.req.set_header("X-USER", res.id_token.sub)

        ngx.redirect("foo")
      }
    }


    location /foo {
      content_by_lua_block {
        ngx.header.content_type = "text/html"
        local template = require("resty.template")
        local session = require "resty.session".open()
        local email = session.data.email
        ngx.log(ngx.DEBUG, "Session data", email)

        template.render("hello.html", { email = email})
      }
    }
  }
}